model:
  base_learning_rate: 8e-04
  weight_decay: 0.0

  target: ldm.models.diffusion.ddpm.LatentDiffusion
  params:
    # linear_start/linear_end: params for linear beta schedule.
    beta_schedule: linear
    linear_start: 0.00085
    linear_end: 0.0120
    num_timesteps_cond: 1
    log_every_t: 200
    timesteps: 1000
    first_stage_key: image
    cond_stage_key: caption
    image_size: 64
    channels: 4
    # cond_stage_trainable has no effect, as it's checked within ddpm.instantiate_cond_stage().
    # After this call, the model sets requires_grad=False for all params of cond_stage (CLIP encoder) 
    # after seeing unfreeze_model = False.
    cond_stage_trainable: true   # Note: different from the one we trained before
    conditioning_key: crossattn
    monitor: val/loss_ema
    scale_factor: 0.18215
    use_ema: False
    unfreeze_model: False
    model_lr: 0.0
    use_layerwise_embedding: True
    use_ada_embedding: True
    do_clip_teacher_filtering: True
    use_fp_trick:              True
    # typical loss_embedding_reg is ~0.04, * weight -> 8e-4.
    embedding_reg_weight:               0.02
    # composition_regs does composition_prompt_mix_reg, which always comes with prompt_delta_reg.
    composition_regs_iter_gap:          3
    # typical delta reg loss: 0.75, * weight -> 1.5e-4
    prompt_emb_delta_reg_weight:        2e-4
    # typical prompt mix reg loss: 0.2, * weight -> 4e-5.
    mix_prompt_distill_weight:          2e-4
    fg_bg_complementary_loss_weight:    1e-3
    fg_bg_mask_align_loss_weight:       1e-3
    # typical fg_bg_key_ortho_loss: 2, * weight -> 8e-5
    # Make fg_bg_key_ortho_loss_weight very small so that it's ineffective. We only monitor the loss value.
    fg_bg_key_ortho_loss_weight:        1e-8

    optimizer_type: AdamW     # sophia
    scheduler_config:
      target: ldm.lr_scheduler.LambdaWarmUpCosineScheduler
      params:
        verbosity_interval: 0
        warm_up_steps: 500
        # max_decay_steps = max_steps = 4000. The final LR is 0.2*base_lr.
        max_decay_steps: 4000
        lr_start: 0.01
        lr_max:   1.0
        lr_min:   0.25

    personalization_config:
      target: ldm.modules.embedding_manager.EmbeddingManager
      params:
        placeholder_strings: ["*"]
        initializer_words: ["sculpture"]
        initializer_weights: [ None ]
        num_vectors_per_token: 1
        use_layerwise_embedding: True
        layerwise_lora_rank_token_ratio: 2
        ada_emb_weight: 0.5
        ada_use_attn_pooler: True

    unet_config:
      target: ldm.modules.diffusionmodules.openaimodel.UNetModel
      params:
        image_size: 32 # unused
        in_channels: 4
        out_channels: 4
        model_channels: 320
        attention_resolutions: [ 4, 2, 1 ]
        num_res_blocks: 2
        channel_mult: [ 1, 2, 4, 4 ]
        num_heads: 8
        use_spatial_transformer: True
        transformer_depth: 1
        context_dim: 768
        use_checkpoint: True
        legacy: False
        
    first_stage_config:
      target: ldm.models.autoencoder.AutoencoderKL
      params:
        embed_dim: 4
        monitor: val/rec_loss
        ddconfig:
          double_z: true
          z_channels: 4
          resolution: 512
          in_channels: 3
          out_ch: 3
          ch: 128
          ch_mult:
          - 1
          - 2
          - 4
          - 4
          num_res_blocks: 2
          attn_resolutions: []
          dropout: 0.0
        lossconfig:
          target: torch.nn.Identity

    cond_stage_config:
      target: ldm.modules.encoders.modules.FrozenCLIPEmbedder
      params:
        last_layers_skip_weights: [0.5, 0.5]

data:
  target: main.DataModuleFromConfig
  params:
    batch_size: 2
    num_workers: 4
    wrap: false
    train:
      target: ldm.data.personalized.PersonalizedBase
      params:
        size: 512       # Image resolution
        set: train
        repeats: 100
        verbose: true
    validation:
      target: ldm.data.personalized.PersonalizedBase
      params:
        size: 512       # Image resolution
        set: val
        repeats: 10
        verbose: true
        
lightning:
  modelcheckpoint:
    params:
      every_n_train_steps: 500
  callbacks:
    image_logger:
      target: main.ImageLogger
      params:
        batch_frequency: 8000     # 8000 > max_steps = 4000, effectively disabling image logger.
        max_images: 8
        increase_log_steps: False

  trainer:
    benchmark: True
    max_steps: 4000
    limit_val_batches: 0.0
    grad_clip: 1
    